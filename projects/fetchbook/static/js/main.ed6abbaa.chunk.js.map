{"version":3,"sources":["data/dog_breeds.ts","data/profile_info.ts","data/default_images.ts","components/header.tsx","components/profile-banner.tsx","components/profile-text.tsx","components/friends-list.tsx","App.tsx","index.tsx"],"names":["dogBreeds","Appenzeller","Chihuahua","EntleBucher","Leonberg","Pomeranian","Rottweiler","Weimaraner","basenji","beagle","bluetick","boxer","briard","collie","groenendael","keeshond","kelpie","komondor","kuvasz","malinois","papillon","redbone","schipperke","whippet","profileInfo","names","cities","treats","defaultImages","Header","ProfileBanner","React","imageURL","imageRef","className","src","alt","ref","loading","ProfileText","stateToggle","appState","profile","prediction","handleUpload","inputRef","onClick","action","text","name","city","treat","probability","breed","htmlFor","id","type","accept","onChange","FriendsList","images","items","setItems","hasMore","setHasMore","length","dataLength","next","setTimeout","concat","loader","endMessage","style","textAlign","map","x","i","stateMachine","initial","states","fetchingData","dataReady","imageReady","scanning","App","tf","setImageURL","model","setModel","setImages","setProfile","setPrediction","state","dispatch","document","title","fetchData","a","mobilenet","version","alpha","findFriends","fetch","min","max","Math","ceil","floor","random","then","res","json","data","Array","isArray","message","status","catch","getRandomProperty","prop","current","click","classify","results","toString","event","files","target","url","URL","createObjectURL","test","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ed6abbaa.chunk.js","sourcesContent":["export const dogBreeds: {\n  [breed: string]: string;\n} = {\n  'Afghan hound, Afghan': 'hound/afghan',\n  'African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus': 'african',\n  'Airedale, Airedale terrier': 'airedale',\n  'American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier':\n    'terrier/american',\n  Appenzeller: 'appenzeller',\n  'Australian terrier': 'terrier/australian',\n  'Bedlington terrier': 'terrier/bedlington',\n  'Bernese mountain dog': 'mountain/bernese',\n  'Blenheim spaniel': 'spaniel/blenheim',\n  'Border collie': 'collie/border',\n  'Border terrier': 'terrier/border',\n  'Boston bull, Boston terrier': 'bulldog/boston',\n  'Bouvier des Flandres, Bouviers des Flandres': 'bouvier',\n  'Brabancon griffon': 'brabancon',\n  'Brittany spaniel': 'spaniel/brittany',\n  'Cardigan, Cardigan Welsh corgi': 'corgi/cardigan',\n  'Chesapeake Bay retriever': 'retriever/chesapeake',\n  Chihuahua: 'chihuahua',\n  'Dandie Dinmont, Dandie Dinmont terrier': 'terrier/dandie',\n  'Doberman, Doberman pinscher': 'doberman',\n  'English foxhound': 'hound/english',\n  'English setter': 'setter/english',\n  'English springer, English springer spaniel': 'springer/english',\n  EntleBucher: 'entlebucher',\n  'Eskimo dog, husky': 'eskimo',\n  'French bulldog': 'bulldog/french',\n  'German shepherd, German shepherd dog, German police dog, alsatian':\n    'germanshepherd',\n  'German short/haired pointer': 'pointer/german',\n  'Gordon setter': 'setter/gordon',\n  'Great Dane': 'dane/great',\n  'Great Pyrenees': 'pyrenees',\n  'Greater Swiss Mountain dog': 'mountain/swiss',\n  'Ibizan hound, Ibizan Podenco': 'hound/ibizan',\n  'Irish setter, red setter': 'setter/irish',\n  'Irish terrier': 'terrier/irish',\n  'Irish water spaniel': 'spaniel/irish',\n  'Irish wolfhound': 'wolfhound/irish',\n  'Italian greyhound': 'greyhound/italian',\n  'Japanese spaniel': 'spaniel/japanese',\n  'Kerry blue terrier': 'terrier/kerryblue',\n  'Labrador retriever': 'labrador',\n  'Lakeland terrier': 'terrier/lakeland',\n  Leonberg: 'leonberg',\n  'Lhasa, Lhasa apso': 'lhasa',\n  'Maltese dog, Maltese terrier, Maltese': 'maltese',\n  'Mexican hairless': 'mexicanhairless',\n  'Newfoundland, Newfoundland dog': 'newfoundland',\n  'Norfolk terrier': 'terrier/norfolk',\n  'Norwegian elkhound, elkhound': 'elkhound/norwegian',\n  'Norwich terrier': 'terrier/norwich',\n  'Old English sheepdog, bobtail': 'sheepdog/english',\n  'Pekinese, Pekingese, Peke': 'pekinese',\n  'Pembroke, Pembroke Welsh corgi': 'pembroke',\n  Pomeranian: 'pomeranian',\n  'Rhodesian ridgeback': 'ridgeback/rhodesian',\n  Rottweiler: 'rottweiler',\n  'Saint Bernard, St Bernard': 'stbernard',\n  'Saluki, gazelle hound': 'saluki',\n  'Samoyed, Samoyede': 'samoyed',\n  'Scotch terrier, Scottish terrier, Scottie': 'terrier/scottish',\n  'Scottish deerhound, deerhound': 'deerhound/scottish',\n  'Sealyham terrier, Sealyham': 'terrier/sealyham',\n  'Shetland sheepdog, Shetland sheep dog, Shetland': 'sheepdog/shetland',\n  'Shih/Tzu': 'shihtzu',\n  'Siberian husky': 'husky',\n  'Staffordshire bullterrier, Staffordshire bull terrier':\n    'bullterrier/staffordshire',\n  'Sussex spaniel': 'spaniel/sussex',\n  'Tibetan mastiff': 'mastiff/tibetan',\n  'Tibetan terrier, chrysanthemum dog': 'terrier/tibetan',\n  'Walker hound, Walker foxhound': 'hound/walker',\n  Weimaraner: 'weimaraner',\n  'Welsh springer spaniel': 'spaniel/welsh',\n  'West Highland white terrier': 'terrier/westhighland',\n  'Yorkshire terrier': 'terrier/yorkshire',\n  'affenpinscher, monkey pinscher, monkey dog': 'affenpinscher',\n  basenji: 'basenji',\n  'basset, basset hound': 'hound/basset',\n  beagle: 'beagle',\n  'black/and/tan coonhound': 'coonhound',\n  'bloodhound, sleuthhound': 'hound/blood',\n  bluetick: 'bluetick',\n  'borzoi, Russian wolfhound': 'borzoi',\n  boxer: 'boxer',\n  briard: 'briard',\n  'bull mastiff': 'mastiff/bull',\n  'cairn, cairn terrier': 'cairn',\n  'chow, chow chow': 'chow',\n  'clumber, clumber spaniel': 'clumber',\n  'cocker spaniel, English cocker spaniel, cocker': 'spaniel/cocker',\n  collie: 'collie/border',\n  'curly/coated retriever': 'retriever/curly',\n  'dalmatian, coach dog, carriage dog': 'dalmatian',\n  'dhole, Cuon alpinus': 'dhole',\n  'dingo, warrigal, warragal, Canis dingo': 'dingo',\n  'flat/coated retriever': 'retriever/flatcoated',\n  'giant schnauzer': 'schnauzer/giant',\n  'golden retriever': 'retriever/golden',\n  groenendael: 'groenendael',\n  keeshond: 'keeshond',\n  kelpie: 'kelpie',\n  komondor: 'komondor',\n  kuvasz: 'kuvasz',\n  'malamute, malemute, Alaskan malamute': 'malamute',\n  malinois: 'malinois',\n  'miniature pinscher': 'pinscher/miniature',\n  'miniature poodle': 'poodle/miniature',\n  'miniature schnauzer': 'schnauzer/miniature',\n  'otterhound, otter hound': 'otterhound',\n  papillon: 'papillon',\n  'pug, pug/dog': 'pug',\n  redbone: 'redbone',\n  schipperke: 'schipperke',\n  'silky terrier, Sydney silky': 'terrier/silky',\n  'soft/coated wheaten terrier': 'terrier/wheaten',\n  'standard poodle': 'poodle/standard',\n  'standard schnauzer': 'schnauzer/miniature',\n  'toy poodle': 'poodle/toy',\n  'toy terrier': 'terrier/toy',\n  'vizsla, Hungarian pointer': 'vizsla',\n  whippet: 'whippet',\n  'wire/haired fox terrier': 'terrier/fox',\n};\n","import { IProfileInfo } from '../types';\n\nexport const profileInfo: IProfileInfo = {\n  names: [\n    'Max',\n    'Charlie',\n    'Devin',\n    'Alex',\n    'Brooklyn',\n    'Angel',\n    'Harper',\n    'Frankie',\n    'Sasha',\n    'Taylor',\n  ],\n  cities: [\n    'San Francisco',\n    'Rotterdam',\n    'Sydney',\n    'Nairobi',\n    'Copenhagen',\n    'Medellin',\n    'Cape Town',\n    'Porto',\n    'Paris',\n    'Milan',\n    'London',\n  ],\n  treats: [\n    'Bones',\n    'Shoes',\n    'Jerky',\n    'Wagyu',\n    'Homework',\n    'Biscuits',\n    'Bacon',\n    'Cuddles',\n    'Long walks on the beach',\n    'Carrots',\n  ],\n};\n","export const defaultImages: string[] = [\n  'https://images.dog.ceo/breeds/shiba/shiba-12.jpg',\n  'https://images.dog.ceo/breeds/shiba/shiba-13.jpg',\n  'https://images.dog.ceo/breeds/shiba/shiba-15.jpg',\n  'https://images.dog.ceo/breeds/shiba/shiba-16.jpg',\n  'https://images.dog.ceo/breeds/shiba/shiba-18.jpg',\n  'https://images.dog.ceo/breeds/shiba/shiba-19.jpg',\n  'https://images.dog.ceo/breeds/shiba/shiba-2.jpg',\n  'https://images.dog.ceo/breeds/shiba/shiba-4.jpg',\n  'https://images.dog.ceo/breeds/shiba/shiba-7.jpg',\n  'https://images.dog.ceo/breeds/shiba/shiba-9.jpg',\n  'https://images.dog.ceo/breeds/shiba/shiba-1.jpg',\n];\n","import * as React from 'react';\nexport const Header = (): JSX.Element => {\n  return <h1>Fetchbook</h1>;\n};\n","import * as React from 'react';\nimport { IProfileBannerProps } from '../types';\n\nexport const ProfileBanner: React.FunctionComponent<IProfileBannerProps> = React.memo(\n  ({ imageURL, imageRef }): JSX.Element => {\n    return (\n      <section className=\"profile-banner\">\n        <img\n          className=\"profile-picture\"\n          src={imageURL}\n          alt=\"upload-preview\"\n          ref={imageRef}\n          loading=\"lazy\"\n        />\n      </section>\n    );\n  },\n);\n","import * as React from 'react';\nimport { IProfileTextProps } from '../types';\n\nexport const ProfileText: React.FunctionComponent<IProfileTextProps> = React.memo(\n  ({\n    stateToggle,\n    appState,\n    profile,\n    prediction,\n    handleUpload,\n    inputRef,\n  }): JSX.Element => {\n    return (\n      <article className=\"profile-text\">\n        <section className=\"profile-info\">\n          <button onClick={stateToggle[appState].action || (() => {})}>\n            {stateToggle[appState].text}\n          </button>\n          <p>Name: {profile.name}</p>\n          <p>City: {profile.city}</p>\n          <p>Favorite Treat: {profile.treat}</p>\n          <p>\n            Breed: {prediction.probability}% chance of {prediction.breed}\n          </p>\n        </section>\n        <form>\n          <label className=\"imageInputLabel\" htmlFor=\"imageInput\">\n            Upload Image\n          </label>\n          <input\n            id=\"imageInput\"\n            name=\"imageInput\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleUpload}\n            ref={inputRef}\n          />\n        </form>\n      </article>\n    );\n  },\n);\n","import * as React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { IFriendsListProps } from '../types';\n\nexport const FriendsList: React.FunctionComponent<IFriendsListProps> = React.memo(\n  ({ images }): JSX.Element => {\n    const [items, setItems] = React.useState(images);\n    const [hasMore, setHasMore] = React.useState(true);\n\n    React.useEffect(() => {\n      setItems(images);\n    }, [images]);\n\n    const fetchData = () => {\n      if (items.length >= 500) {\n        setHasMore(false);\n        return;\n      }\n      setTimeout(() => {\n        setItems(items => items.concat(items));\n      }, 500);\n    };\n\n    return (\n      <div className=\"carousel-outer\">\n        <p className=\"carousel-friend-count\">Friends ({images.length})</p>\n        <InfiniteScroll\n          dataLength={items.length}\n          next={fetchData}\n          hasMore={hasMore}\n          loader={<h4></h4>}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>Down to the bone! 🦴</b>\n            </p>\n          }\n        >\n          {items.map((x, i) => (\n            <div key={'image' + i} className=\"carousel-image\">\n              <img src={x} alt=\"\" loading=\"lazy\" />\n            </div>\n          ))}\n        </InfiniteScroll>\n      </div>\n    );\n  },\n);\n","import * as React from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport { dogBreeds } from './data/dog_breeds';\nimport { profileInfo } from './data/profile_info';\nimport { defaultImages } from './data/default_images';\nimport { Header } from './components/header';\nimport { ProfileBanner } from './components/profile-banner';\nimport { ProfileText } from './components/profile-text';\nimport { FriendsList } from './components/friends-list';\nimport { IProfile, IStateMachine, IPrediction, IStateToggle } from './types';\nimport './App.css';\n\n//STATE MACHINE\nconst stateMachine: IStateMachine = {\n  initial: 'initial',\n  states: {\n    initial: { next: 'fetchingData' },\n    fetchingData: { next: 'dataReady' },\n    dataReady: { next: 'imageReady' },\n    imageReady: { next: 'scanning' },\n    scanning: { next: 'dataReady' },\n  },\n};\n\nexport const App = (): JSX.Element => {\n  tf.setBackend('cpu');\n\n  //STATE VARIABLES\n  const [imageURL, setImageURL] = React.useState<string>(\n    'https://pbs.twimg.com/media/E3oJUg1XIAkDQVK?format=jpg&name=large',\n  );\n  const [model, setModel] = React.useState<mobilenet.MobileNet | null>(null);\n  const [images, setImages] = React.useState<string[]>(defaultImages);\n  const [profile, setProfile] = React.useState<IProfile>({\n    name: 'Bodhi',\n    city: 'New York',\n    treat: 'Kith',\n  });\n  const [prediction, setPrediction] = React.useState<IPrediction>({\n    breed: 'Shiba',\n    probability: '100',\n  });\n\n  //REFS\n  const imageRef = React.useRef<HTMLImageElement>();\n  const inputRef = React.useRef<HTMLInputElement>();\n\n  //REDUCER\n  const reducer = (state: string, action: 'next' = 'next') =>\n    stateMachine.states[state][action] || stateMachine.initial;\n\n  const [appState, dispatch] = React.useReducer(reducer, stateMachine.initial);\n  const next = () => dispatch();\n\n  React.useEffect(() => {\n    document.title = `${profile.name} | Fetchbook`;\n  }, [profile.name]);\n\n  const getRandomInt = (min: number, max: number) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  const fetchData = async () => {\n    next();\n    const model = await mobilenet.load({ version: 2, alpha: 1 });\n    setModel(model);\n    next();\n  };\n\n  const upload = () => inputRef.current?.click();\n\n  const handleUpload = (event: { target: { files: any } }) => {\n    const { files } = event.target;\n    const url: React.SetStateAction<string> = URL.createObjectURL(\n      event.target.files[0],\n    );\n    if (/^image\\/+/.test(files[0].type)) {\n      setImageURL(url);\n      next();\n    }\n  };\n\n  const findFriends = async (breed: string) => {\n    fetch(\n      `https://dog.ceo/api/breed/${\n        dogBreeds[breed]\n      }/images/random/${getRandomInt(20, 50)}`,\n    )\n      .then(res => res.json())\n      .then(data =>\n        Array.isArray(data.message) && data.status !== 'error'\n          ? setImages(data.message)\n          : setImages([]),\n      )\n      .catch(() => {\n        setImages([]);\n      });\n  };\n\n  const getRandomProperty = (prop: any): string =>\n    profileInfo[prop][~~(Math.random() * profileInfo[prop].length)];\n\n  const updateProfile: () => Promise<void> = async () => {\n    next();\n\n    const results:\n      | {\n          className: string;\n          probability: number;\n        }[]\n      | undefined = await model?.classify(imageRef.current, 1);\n    const breed: string = results[0].className;\n    const probability: string = Math.floor(\n      results[0].probability * 100,\n    ).toString();\n    setPrediction({\n      breed: breed,\n      probability: probability,\n    });\n\n    if (dogBreeds[breed]) {\n      findFriends(breed);\n      setProfile({\n        name: getRandomProperty('names'),\n        city: getRandomProperty('cities'),\n        treat: getRandomProperty('treats'),\n      });\n    } else {\n      setProfile({\n        name: 'N/A',\n        city: 'N/A',\n        treat: 'N/A',\n      });\n      setImages([]);\n    }\n\n    next();\n  };\n\n  const stateToggle: IStateToggle = {\n    initial: { action: fetchData, text: 'Fetch Data' },\n    fetchingData: { text: 'Fetching...' },\n    dataReady: { action: upload, text: 'Upload New Dog' },\n    imageReady: { action: updateProfile, text: 'Update Profile' },\n    scanning: { text: 'Scanning...' },\n  };\n\n  return (\n    <div>\n      <Header />\n      <ProfileBanner imageURL={imageURL} imageRef={imageRef} />\n      <ProfileText\n        stateToggle={stateToggle}\n        appState={appState}\n        profile={profile}\n        prediction={prediction}\n        handleUpload={handleUpload}\n        inputRef={inputRef}\n      />\n      <FriendsList images={images} />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}